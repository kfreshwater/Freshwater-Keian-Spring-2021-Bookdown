[["index.html", "Spring 2022 Code Portfolio Introduction", " Spring 2022 Code Portfolio Keian Freshwater 2022-03-19 Introduction This site serves as a portfolio for R software projects conducted during Spring 2022. These projects were created during Colorado State Universitys Introduction to Data Science graduate course, but independently serve as a representation of different learned techniques. Each of the following chapters highlight a specific R topic expressed through a real-world analysis, consisting of detailed figures, textual interpretations of the data, and commented code blocks. "],["r-markdown-basics.html", "Chapter 1 R Markdown Basics 1.1 Methods 1.2 Site Description 1.3 Data Acquisition and Plotting tests 1.4 Static Data Plotter 1.5 Interactive Data Plotter 1.6 DyGraph example. 1.7 Poudre Paragraph", " Chapter 1 R Markdown Basics Case Study: The Poudre River 1.1 Methods The Poudre River at Lincoln Bridge is: Downstream of only a little bit of urban stormwater Near Odell Brewing CO Near an open space area and the Poudre River Trail Downstream of many agricultural diversions 1.2 Site Description 1.3 Data Acquisition and Plotting tests #Downloaded Data using the custom USGS NWIS tool q &lt;- readNWISdv(siteNumbers = &#39;06752260&#39;, parameterCd = &#39;00060&#39;, startDate = &#39;2017-01-01&#39;, endDate = &#39;2022-01-01&#39;) %&gt;% rename(q = &#39;X_00060_00003&#39;) 1.4 Static Data Plotter #First use of ggplot to graph data ggplot(q, aes(x = Date, y = q)) + geom_line() + ylab(&#39;Q (cfs)&#39;) + ggtitle(&#39;Discharge in the Poudre River, Fort Collins&#39;) 1.5 Interactive Data Plotter #order by date q_xts &lt;- xts(q$q, order.by = q$Date) #first use of &#39;dygraph&#39; in order to greate an interactive plotter dygraph(q_xts) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Discharge (cfs)&quot;) 1.6 DyGraph example. #second use of &#39;dygraph&#39; in order to order and create an interactive plotter. Identical graph, but demonstrates inclusion of distinct points. q_xts &lt;- xts(q$q, order.by = q$Date) dygraph(q_xts) %&gt;% dyAxis(&quot;y&quot;, label = &quot;Discharge (cfs)&quot;) %&gt;% dyOptions(drawPoints = TRUE, pointSize = 1.6) 1.7 Poudre Paragraph #example paragraph to demonstrate url, bolding, and italic functions. The Poudre River is a National Heritage Area located in the state of Colorado, originally designated in 2009. The river begins in Rocky Mountain National Park, before joining with the South Platte River east of Greeley, Colorado. Over half a million residents in Northern Colorado depend on the water supplied by the Poudre River. The National Water Quality Council tracks USGS stations monitoring hydrologic conditions; on the National Water Quality Councils website, station data can be isolated from the beginning of the Poudre River, all the way to the South Plattesand resulting Plattesconjunction to the Missippi River. Looking just at Fort Collins, there are a high concentration of USGS stations along the path of the river. Fort Collins Utilities works hard to ensure that residents in the city will have clean, drinkable water; although not all water comes from tin 2020, it was estimated that facilities treat 23 million gallons of water a day. The city doesnt solely rely on the South Platte River, of course; during wildfire runoff events that increases sediment levels above capacity limits, Fort Collins relies more heavily on water from Horsetooth Reservoir. "],["fire-wrangle.html", "Chapter 2 Fire Wrangle 2.1 Correlation between NDVI and NDMI, using a wide dataset. Data is between 1984-2019, and focuses on summer months (Jun-Sept): 2.2 Correlation between average NDSI (normalized snow index) for January - April and average NDVI for June-August. Does the previous years snow cover influence vegetation growth for the following summer? 2.3 How is the snow effect from question 2 different between pre- and post-burn and burned and unburned?", " Chapter 2 Fire Wrangle library(tidyverse) library(tidyr) library(ggthemes) library(lubridate) Case Study: Hayman Fire Reading in Selected Datasets: #Reading in files files_updated &lt;- list.files(&#39;Data/Chapter_2/Updated&#39;,full.names=T) #Read in individual data files ndmi_updated &lt;- read_csv(files_updated[1]) %&gt;% rename(burned=2,unburned=3) %&gt;% mutate(DateTime=as.Date(DateTime, format = &quot;%m/%d/%Y&quot;), data=&#39;ndmi&#39;) ndsi_updated &lt;- read_csv(files_updated[2]) %&gt;% rename(burned=2,unburned=3) %&gt;% mutate(DateTime=as.Date(DateTime, format = &quot;%m/%d/%Y&quot;), data=&#39;ndsi&#39;) ndvi_updated &lt;- read_csv(files_updated[3])%&gt;% rename(burned=2,unburned=3) %&gt;% mutate(DateTime=as.Date(DateTime, format = &quot;%m/%d/%Y&quot;), data=&#39;ndvi&#39;) # Stack as a tidy dataset full_long_updated &lt;- rbind(ndvi_updated,ndmi_updated,ndsi_updated) %&gt;% gather(key=&#39;site&#39;,value=&#39;value&#39;,-data,-DateTime) %&gt;% filter(!is.na(value)) 2.1 Correlation between NDVI and NDMI, using a wide dataset. Data is between 1984-2019, and focuses on summer months (Jun-Sept): #using pivot_wider to create a wide dataset. full_wide_updated &lt;- full_long_updated %&gt;% pivot_wider(id_cols= NULL, names_from = &quot;data&quot;, values_from = &quot;value&quot;) %&gt;% mutate(month=month(DateTime), year=year(DateTime)) %&gt;% filter(month %in% c(6,7,8,9)) Plotting the Correlation between NDVI and NDMI: ggplot(data=full_wide_updated,aes(x=ndmi,y=ndvi, color=month)) + geom_point() + xlab(&#39;NDMI&#39;) + ylab (&#39;NDVI&#39;) There is a strong positive linear correlation between NDMI and NDVI. 2.2 Correlation between average NDSI (normalized snow index) for January - April and average NDVI for June-August. Does the previous years snow cover influence vegetation growth for the following summer? Creating a clean data set containing relevant averages: #mutating by month full_wide_full_updated &lt;- spread(full_long_updated,data,value) %&gt;% mutate(month=month(DateTime), year=year(DateTime)) %&gt;% group_by(site,year) #summarizing mean values for summer full_wide_average_summer_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(6,7,8))%&gt;% group_by(year) %&gt;% summarize(mean_NDVI_summer = mean(ndvi,na.rm=TRUE)) #summarizing mean values for spring full_wide_average_spring_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(1,2,3,4))%&gt;% group_by(year) %&gt;% summarize(mean_NDSI_spring = mean(ndsi,na.rm=TRUE)) #joining the mean datasets full_wide_average_updated &lt;- inner_join(full_wide_average_spring_updated,full_wide_average_summer_updated) Plotting the Correlation between average summer NDVI and average spring NDSI: #plotting datasets ggplot(data=full_wide_average_updated,aes(x=mean_NDSI_spring,y=mean_NDVI_summer, color=year)) + geom_point() + xlab(&#39;Average NDSI (Jan-Apr)&#39;) + ylab (&#39;Average NDVI (Jun-Aug)&#39;) There is little correlation between average spring NDSI and average summer NDVI; if generous, there might be a weak positive correlation. Overall, the most notable pattern is that, for roughly the same range of NDSI, the average summer NDVI is, generally, lower in the 2010s compared to the 1990s. 2.3 How is the snow effect from question 2 different between pre- and post-burn and burned and unburned? Filter by Burned/Unburned: #filter by unburned full_wide_unburned_updated &lt;- full_wide_full_updated %&gt;% filter(site %in% c(&#39;unburned&#39;)) #filter by burned full_wide_burned_updated &lt;- full_wide_full_updated %&gt;% filter(site %in% c(&#39;burned&#39;)) Filter and Graph Unburned average summer NDVI and average spring NDSI: #filtering by summer full_wide_unburned_average_summer_updated &lt;- full_wide_unburned_updated %&gt;% filter(month %in% c(6,7,8))%&gt;% group_by(year) %&gt;% summarize(mean_NDVI_summer = mean(ndvi,na.rm=TRUE)) #filtering by spring full_wide_unburned_average_spring_updated &lt;- full_wide_unburned_updated %&gt;% filter(month %in% c(1,2,3,4))%&gt;% group_by(year) %&gt;% summarize(mean_NDSI_spring = mean(ndsi,na.rm=TRUE)) #joining dataset full_wide_average_unburned_updated &lt;- inner_join(full_wide_unburned_average_spring_updated,full_wide_unburned_average_summer_updated) #graphing dataset ggplot(data=full_wide_average_unburned_updated,aes(x=mean_NDSI_spring,y=mean_NDVI_summer, color=year)) + geom_point() + xlab(&#39;Average NDSI (Jan-Apr)&#39;) + ylab (&#39;Average NDVI (Jun-Aug)&#39;) The unburned graph supports the identical conclusion as problem 2; there is little (at most, weak positive) correlation between Average Spring NDSI and Average Summer NDVI. Filter and Graph Burned average summer NDVI and average spring NDSI: #filter by summer full_wide_burned_average_summer_updated &lt;- full_wide_burned_updated %&gt;% filter(month %in% c(6,7,8))%&gt;% group_by(year) %&gt;% summarize(mean_NDVI_summer = mean(ndvi,na.rm=TRUE)) #filter by spring full_wide_burned_average_spring_updated &lt;- full_wide_burned_updated %&gt;% filter(month %in% c(1,2,3,4))%&gt;% group_by(year) %&gt;% summarize(mean_NDSI_spring = mean(ndsi,na.rm=TRUE)) #join datasets full_wide_average_burned_updated &lt;- inner_join(full_wide_burned_average_summer_updated,full_wide_burned_average_spring_updated) #graph datasets ggplot(data=full_wide_average_burned_updated,aes(x=mean_NDSI_spring,y=mean_NDVI_summer, color=year)) + geom_point() + xlab(&#39;Average NDSI (Jan-Apr)&#39;) + ylab (&#39;Average NDVI (Jun-Aug)&#39;) In the 1980s and 1990s, the burned areas had exclusively high NDVI regardless of of NDSI, while the 2000s and 2010s had comparatively low NDVI regardless of NDSI. For the following questions: #filter per month full_wide_jan_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(1)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_feb_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(2)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_mar_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(3)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_apr_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(4)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_may_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(5)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_jun_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(6)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_jul_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(7)) %&gt;% select(-DateTime) %&gt;% group_by(year,ndvi,ndmi,ndsi) full_wide_aug_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(8)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_sept_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(9)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_oct_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(10)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_nov_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(11)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) full_wide_dec_updated &lt;- full_wide_full_updated %&gt;% filter(month %in% c(12)) %&gt;% group_by(month) %&gt;% select(-DateTime,-site,-year) 2.3.1 What month is the greenest month on average? Calculate Averages for NDVI: #calculate averages per month jan_NDVI_updated &lt;- mean(full_wide_jan_updated$ndvi,na.rm=TRUE) feb_NDVI_updated &lt;- mean(full_wide_feb_updated$ndvi,na.rm=TRUE) mar_NDVI_updated &lt;- mean(full_wide_mar_updated$ndvi,na.rm=TRUE) apr_NDVI_updated &lt;- mean(full_wide_apr_updated$ndvi,na.rm=TRUE) may_NDVI_updated &lt;- mean(full_wide_may_updated$ndvi,na.rm=TRUE) jun_NDVI_updated &lt;- mean(full_wide_jun_updated$ndvi,na.rm=TRUE) jul_NDVI_updated &lt;- mean(full_wide_jul_updated$ndvi,na.rm=TRUE) aug_NDVI_updated &lt;- mean(full_wide_aug_updated$ndvi,na.rm=TRUE) sept_NDVI_updated &lt;- mean(full_wide_sept_updated$ndvi,na.rm=TRUE) oct_NDVI_updated &lt;- mean(full_wide_oct_updated$ndvi,na.rm=TRUE) nov_NDVI_updated &lt;- mean(full_wide_nov_updated$ndvi,na.rm=TRUE) dec_NDVI_updated &lt;- mean(full_wide_dec_updated$ndvi,na.rm=TRUE) Organize in Table: #bind to a single table green_NVDI_updated &lt;- rbind.data.frame(jan_NDVI_updated,feb_NDVI_updated,mar_NDVI_updated,apr_NDVI_updated,may_NDVI_updated,jun_NDVI_updated,jul_NDVI_updated,aug_NDVI_updated,sept_NDVI_updated,oct_NDVI_updated,nov_NDVI_updated,dec_NDVI_updated) greenest_month_updated &lt;- max(green_NVDI_updated) NDVI stands for Normalized Difference Vegetation Index, where the highest NDVI will indicate the greenest month on average. The greenest month is August, with an average NDVI of 0.385766. 2.3.2 What month is the snowiest on average? Calculate Averages for NDVI: #calculate averages per month jan_NDSI_updated &lt;- mean(full_wide_jan_updated$ndsi,na.rm=TRUE) feb_NDSI_updated &lt;- mean(full_wide_feb_updated$ndsi,na.rm=TRUE) mar_NDSI_updated &lt;- mean(full_wide_mar_updated$ndsi,na.rm=TRUE) apr_NDSI_updated &lt;- mean(full_wide_apr_updated$ndsi,na.rm=TRUE) may_NDSI_updated &lt;- mean(full_wide_may_updated$ndsi,na.rm=TRUE) jun_NDSI_updated &lt;- mean(full_wide_jun_updated$ndsi,na.rm=TRUE) jul_NDSI_updated &lt;- mean(full_wide_jul_updated$ndsi,na.rm=TRUE) aug_NDSI_updated &lt;- mean(full_wide_aug_updated$ndsi,na.rm=TRUE) sept_NDSI_updated &lt;- mean(full_wide_sept_updated$ndsi,na.rm=TRUE) oct_NDSI_updated &lt;- mean(full_wide_oct_updated$ndsi,na.rm=TRUE) nov_NDSI_updated &lt;- mean(full_wide_nov_updated$ndsi,na.rm=TRUE) dec_NDSI_updated &lt;- mean(full_wide_dec_updated$ndsi,na.rm=TRUE) Organize in Table: #bind to a table snow_NDSI_updated &lt;- rbind.data.frame(jan_NDSI_updated,feb_NDSI_updated,mar_NDSI_updated,apr_NDSI_updated,may_NDSI_updated,jun_NDSI_updated,jul_NDSI_updated,aug_NDSI_updated,sept_NDSI_updated,oct_NDSI_updated,nov_NDSI_updated,dec_NDSI_updated) snowiest_month_updated &lt;- max(snow_NDSI_updated) NDSI stands for Normalized Difference Snow Index, where the highest NDSI will indicate the snowiest month on average. The snowiest month is January, with an average NDSI of 0.1834847. "],["iterations-snow-functions.html", "Chapter 3 Iterations (Snow Functions) 3.1 Extract the meteorological data URLs. 3.2 Downloading meteorological data. 3.3 Writing a custom function to read in data and append a site column to the data. 3.4 Using the map function to read in both meteorological files. 3.5 Line plots - mean temp by year by site. 3.6 Writing a function for line plots of monthly average temperature at each site for a given year. 3.7 For loop - multi-year plotting 3.8 Function and For loop  yearly plots of precipitation by day of year.", " Chapter 3 Iterations (Snow Functions) Case Study: Snowstudies.org 3.1 Extract the meteorological data URLs. #Extracting only the weblinks and then the URLs! The `rvest` package is used to to get the URLs for the `SASP forcing` and `SBSP_forcing` meteorological datasets. site_url &lt;- &#39;https://snowstudies.org/archived-data/&#39; #Reading the web url webpage &lt;- read_html(site_url) links_forcing &lt;- webpage %&gt;% html_nodes(&#39;a&#39;) %&gt;% .[grepl(&#39;forcing&#39;,.)] %&gt;% html_attr(&#39;href&#39;) 3.2 Downloading meteorological data. #Use of the `download_file` and `str_split_fixed` commands to download the data and save it in data folder #Grabbing only the name of the file by splitting out on forward slashes splits_forcing &lt;- str_split_fixed(links_forcing,&#39;/&#39;,8) #Keeping only the 8th column dataset_forcing &lt;- splits_forcing[,8] #generating a file list for where the data goes file_names_forcing &lt;- paste0(&#39;data/&#39;,dataset_forcing) for(i in 1:2){ download.file(links_forcing[i],destfile=file_names_forcing[i]) } downloaded_forcing &lt;- file.exists(file_names_forcing) evaluate_forcing &lt;- !all(downloaded_forcing) 3.3 Writing a custom function to read in data and append a site column to the data. # headers from metadata pdf file library(pdftools) headers_forcing &lt;- pdf_text(&#39;https://snowstudies.org/wp-content/uploads/2022/02/Serially-Complete-Metadata-text08.pdf&#39;) %&gt;% readr::read_lines(.) %&gt;% trimws(.) %&gt;% str_split_fixed(.,&#39;\\\\.&#39;,2) %&gt;% .[,2] %&gt;% .[1:26] %&gt;% str_trim(side = &quot;left&quot;) #writing the function forcing_reader &lt;- function(file_names_forcing){ name = str_split_fixed(file_names_forcing,&#39;/&#39;,2)[,2] %&gt;% gsub(&#39;_Forcing_Data.txt&#39;,&#39;&#39;,.) reading = read.delim(file_names_forcing, header = FALSE, sep =&quot;&quot;,col.names = headers_forcing,skip = 4) %&gt;% mutate(site=name) } 3.4 Using the map function to read in both meteorological files. forcing_data_full &lt;- map_dfr(file_names_forcing,forcing_reader) #tibble summary summary(forcing_data_full) ## year month day hour minute ## Min. :2003 Min. : 1.000 Min. : 1.00 Min. : 0.00 Min. :0 ## 1st Qu.:2005 1st Qu.: 3.000 1st Qu.: 8.00 1st Qu.: 5.75 1st Qu.:0 ## Median :2007 Median : 6.000 Median :16.00 Median :11.50 Median :0 ## Mean :2007 Mean : 6.472 Mean :15.76 Mean :11.50 Mean :0 ## 3rd Qu.:2009 3rd Qu.: 9.000 3rd Qu.:23.00 3rd Qu.:17.25 3rd Qu.:0 ## Max. :2011 Max. :12.000 Max. :31.00 Max. :23.00 Max. :0 ## ## second precip..kg.m.2.s.1. sw.down..W.m.2. lw.down..W.m.2. ## Min. :0 Min. :0.000e+00 Min. :-9999.000 Min. :-9999.0 ## 1st Qu.:0 1st Qu.:0.000e+00 1st Qu.: -3.510 1st Qu.: 173.4 ## Median :0 Median :0.000e+00 Median : -0.344 Median : 231.4 ## Mean :0 Mean :3.838e-05 Mean :-1351.008 Mean :-1325.7 ## 3rd Qu.:0 3rd Qu.:0.000e+00 3rd Qu.: 294.900 3rd Qu.: 272.2 ## Max. :0 Max. :6.111e-03 Max. : 1341.000 Max. : 365.8 ## ## air.temp..K. windspeed..m.s.1. relative.humidity.... pressure..Pa. ## Min. :242.1 Min. :-9999.000 Min. : 0.011 Min. :63931 ## 1st Qu.:265.8 1st Qu.: 0.852 1st Qu.: 37.580 1st Qu.:63931 ## Median :272.6 Median : 1.548 Median : 59.910 Median :65397 ## Mean :272.6 Mean : -790.054 Mean : 58.891 Mean :65397 ## 3rd Qu.:279.7 3rd Qu.: 3.087 3rd Qu.: 81.600 3rd Qu.:66863 ## Max. :295.8 Max. : 317.300 Max. :324.800 Max. :66863 ## ## specific.humidity..g.g.1. calculated.dewpoint.temperature..K. ## Min. :0.000000 Min. : 0.0 ## 1st Qu.:0.001744 1st Qu.: 0.0 ## Median :0.002838 Median : 0.0 ## Mean :0.003372 Mean : 74.9 ## 3rd Qu.:0.004508 3rd Qu.: 0.0 ## Max. :0.014780 Max. :2002.0 ## ## precip..WMO.corrected..kg.m.2.s.1. ## Min. : 0.0 ## 1st Qu.: 0.0 ## Median : 0.0 ## Mean : 424.7 ## 3rd Qu.: 0.0 ## Max. :3002.0 ## ## air.temp..corrected.with.Kent.et.al...1993...K. ## Min. : 0 ## 1st Qu.: 0 ## Median : 0 ## Mean : 438 ## 3rd Qu.: 0 ## Max. :5002 ## ## air.temp..corrected.with.Anderson.and.Baumgartner..1998..K. ## Min. : 0.0 ## 1st Qu.: 0.0 ## Median : 0.0 ## Mean : 173.9 ## 3rd Qu.: 0.0 ## Max. :5002.0 ## ## air.temp..corrected.with.Nakamura.and.Mahrt..2005...K. ## Min. : 0.0 ## 1st Qu.: 0.0 ## Median : 0.0 ## Mean : 605.9 ## 3rd Qu.: 0.0 ## Max. :6002.0 ## ## air.temp..corrected.with.Huwald.et.al...2009...K. qc.code.precip ## Min. : 0.00 Mode:logical ## 1st Qu.: 0.00 NA&#39;s:138336 ## Median : 0.00 ## Mean : 56.49 ## 3rd Qu.: 0.00 ## Max. :6009.00 ## NA&#39;s :5214 ## qc.code.sw.down qc.code.lw.down qc.code.air.temp qc.code.wind.speed ## Mode:logical Mode:logical Mode:logical Mode:logical ## NA&#39;s:138336 NA&#39;s:138336 NA&#39;s:138336 NA&#39;s:138336 ## ## ## ## ## ## qc.code.relhum site ## Mode:logical Length:138336 ## NA&#39;s:138336 Class :character ## Mode :character ## ## ## ## 3.5 Line plots - mean temp by year by site. #summarizing mean temperature forcing_yearly &lt;- forcing_data_full %&gt;% group_by(year,site) %&gt;% summarize(yearly_air_temp_k = mean(air.temp..K.,na.rm=T)) #graphing data ggplot(forcing_yearly,aes(x=year,y=yearly_air_temp_k,color=site)) + geom_line() + scale_x_continuous(breaks = c(2003,2004,2005,2006,2007,2008,2009,2010,2011))+ ggthemes::theme_few() + ggthemes::scale_color_few() + ylab(&#39;Air Temperature (K)&#39;) For both the SASP and SBSP sites, here is a sharp increase in air temperature between the years 2003 and 2005; this is at odds with the stable trendline from 2005 onwards. The following graph filters the years before 2005: #filtering by year 2005 forcing_yearly_filter &lt;- forcing_yearly %&gt;% filter(year &gt;= 2005) #graphing data ggplot(forcing_yearly_filter,aes(x=year,y=yearly_air_temp_k,color=site)) + geom_line() + scale_x_continuous(breaks = c(2005,2006,2007,2008,2009,2010,2011)) + ggthemes::theme_few() + ggthemes::scale_color_few() + ylab(&#39;Air Temperature (K)&#39;) 3.6 Writing a function for line plots of monthly average temperature at each site for a given year. Hint: https://ggplot2.tidyverse.org/reference/print.ggplot.html #summarizing mean temperature forcing_monthly_air_temperature &lt;- forcing_data_full %&gt;% group_by(year,month,site) %&gt;% summarize(monthly_air_temp_k = mean(air.temp..K.,na.rm=T)) #creating function for graphing temp_plot &lt;- function(filter_year_function,year_air){ filter_year_function &lt;- forcing_monthly_air_temperature %&gt;% group_by(year,month,site) %&gt;% filter(year==year_air) #changing text by year str1 = &#39;Month (&#39; str2 = year_air str3 = &quot;Year)&quot; #plotting x= ggplot(filter_year_function, aes(x=month,y=monthly_air_temp_k,color=site)) + geom_line() + scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11,12), label = c(&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sept&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;))+ ggthemes::theme_few() + ggthemes::scale_color_few() + ylab(&#39;Air Temperature (K)&#39;) + xlab(paste(str1,str2,str3)) print(x) } 3.7 For loop - multi-year plotting #using function, plotting each year from 2005 to 2010. for (year_air in 2005:2010) { temp_plot(filter_year_function,year_air) } From 2005 to 2010, at no point in the year is the Senator Beck Study Plot warmer than the Snow Angel Study Plot. 3.7.1 Plot of average daily precipitation by day of year #mutating by day of year forcing_precip_filter &lt;- forcing_data_full %&gt;% group_by(year,month,day,site) %&gt;% filter(site==&#39;SBB_SASP&#39;) %&gt;% unite(&quot;date&quot;, year, month, day, sep = &quot;-&quot;, remove = FALSE) %&gt;% mutate(date = ymd(date)) %&gt;% mutate(doy = yday(date)) %&gt;% summarize(precip= precip..WMO.corrected..kg.m.2.s.1., doy=doy) #summarizing mean values forcing_precip_filter_avg &lt;- forcing_precip_filter %&gt;% group_by(doy,site) %&gt;% summarize(doy_precip = mean(precip)) #graphing ggplot(forcing_precip_filter_avg, aes(x=doy,y=doy_precip)) + geom_line() + ggthemes::theme_few() + ggthemes::scale_color_few() + ylab(&#39;Average Corrected WMO precipitation (kg/m^2*s)&#39;) + xlab(&#39;Day of the Year&#39;) These graphs show the corrected WMO precipitation in kg/m&amp;2*s for each day of the year, averaged over the data range 2003-2011. Both SBB_SASP and SBB_SBSP report from the same gauge. 3.8 Function and For loop  yearly plots of precipitation by day of year. #creating function precip_plot &lt;- function(filter_year_function_precip,year_precip){ forcing_precip_function_year&lt;- forcing_data_full %&gt;% group_by(year,month,day,site) %&gt;% filter(site==&#39;SBB_SASP&#39;, year==year_precip) %&gt;% unite(&quot;date&quot;, year, month, day, sep = &quot;-&quot;, remove = FALSE) %&gt;% mutate(date = ymd(date)) %&gt;% mutate(doy = yday(date)) %&gt;% summarize(precip= precip..WMO.corrected..kg.m.2.s.1., doy=doy) forcing_precip_filter_avg_year &lt;- forcing_precip_function_year %&gt;% group_by(doy,site) %&gt;% summarize(doy_precip = mean(precip)) #changing text by year str1 = &#39;Day of the Year (&#39; str2 = year_precip str3 = &quot;Year)&quot; #plotting z = ggplot(forcing_precip_filter_avg_year, aes(x=doy,y=doy_precip)) + geom_line() + ggthemes::theme_few() + ggthemes::scale_color_few() + ylab(&#39;Average Corrected WMO precipitation (kg/m^2*s)&#39;) + xlab(paste(str1,str2,str3)) print(z) } #excecuting function in for loop for (year_precip in 2003:2011) { precip_plot(filter_year_function_precip,year_precip) } These graphs show the corrected WMO precipitation in kg/m&amp;2*s for each year in the range 2003-2011 Both SBB_SASP and SBB_SBSP are report from the same gauge. "]]
